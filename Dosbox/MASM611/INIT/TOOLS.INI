[pwb brief b]
; TOOLS.INI file for BRIEF(tm) configuration

NotBrief:=arg "No equivalent in the Programmer's WorkBench" message
ToolsIni:=arg "$INIT:tools.ini" setfile

;
; GLOBAL CONFIGURATION
;
autosave:no
undocount:30
autostart:=toggle_re
vscroll:1
nounixre:
rmargin:70
menukey:f9

;
;   Backup File Toggle. Toggle through PWB's backup options and let
;   the user know that something extra is going on.
;
backup:bak
baknone:=arg "backup:none" assign arg "File backups turned off!" message  \
        arg "bakbak:Ctrl+W" assign
bakbak:=arg "backup:bak" assign arg "Single backups enabled" message  \
        arg "bakundel:Ctrl+W" assign
bakundel:= arg "backup:undel" assign arg "Multiple backups enabled" message  \
        arg "baknone:Ctrl+W" assign
bakundel:Ctrl+W

;
;   Beginning of Line
;
beginning_of_line:=meta begline
beginning_of_line:Home

;
;   Case Sensitivity Toggle
;
case:yes
caseon:=arg "case:" assign arg "Enabled Case Sensitivity" message  \
        arg "caseoff:ctrl+f5" assign
caseoff:=arg "nocase:" assign arg "Disabled Case Sensitivity" message  \
        arg "caseon:ctrl+f5" assign
caseoff:ctrl+f5

;
;   Center Line Horizontally
;   Center Line in Window.
;
center:= arg "Please load the txtfmt extension" message
center:Ctrl+C

;
;   Change Output File
;
output_file:=arg arg "New Output File Name" prompt ->can setfile => :>can cancel
output_file:Alt+O

;
;   Change Window
;
Window:F2

;
;   Color.  To set colors in the PWB, assign a new value to one of the
;   following switches. The value is a two digit hex number where the
;   first digit is the background color and the second is the foreground.
;   The number to color mapping is the same as in Brief.  The color change
;   will not take effect until you restart the editor.  To see an immediate
;   change, mark (select) the color assignment lines and press Alt+=.
;
colour:=ToolsIni begfile arg "colour:=ToolsIni" psearch up up up up up up up
color:text 07
color:selection 70
color:highlight 02
color:info 06
color:border 07

;
;   Compile Buffer.  Compile command is set with the 'build' switch
;   (see documentation).
;
compile_it:=Arg Compile
compile_it:Alt+F10

;
;   Create Key Assignment
;
assign_to_key:=arg "<assign>" setfile

;
;   Create Window.  Window handling is very different in the PWB.
;
;   To create a new window, move the cursor to the line or column where
;   the new border is to be placed and do:
;
;               Alt+A F3        - to create a horizontal border
;               Alt+A Alt+A F3  - to create a vertical border
;
;   To change the current window, press F3.
;
;   To delete an existing window, go to that window and press F4.
;
create_edge:=ToolsIni begfile arg "create_edge:=" psearch  \
        mpara arg setwindow  \
        arg "window:F3" assign
create_edge:F3

;
;   Cut to Scrap.  Doesn't take current line if nothing is selected.
;
delete:num-

;
;   Delete
;
clear:=meta delete
clear:del

;
;   Delete Current Buffer
;
delete_curr_buffer:=arg refresh
delete_curr_buffer:Ctrl+-

;
;   Delete Line.
;
line_delete:=meta ldelete
line_delete:Alt+D

;
;   Delete Macro File
;
NotBrief:Shift+F9

;
;   Delete Next Word
;
delete_next_word:=Arg Pword Clear

;
;   Delete Previous Word
;
delete_previous_word:=Pword Arg Mword Clear
delete_previous_word:Ctrl+Bksp

;
;   Delete to End of Line
;
delete_to_eol:=arg ldelete
delete_to_eol:Alt+K

;
;   Delete Window
;
delete_edge:=meta window
delete_edge:F4

;
;   Display File Name
;
display_file_name:=arg curfile message
display_file_name:Alt+F

;
;   Display version ID
;
version:=arg "Microsoft Programmer's WorkBench Version 1.10" message
version:Alt+V

;
;   EditFile
;
EditFile:=arg "Name of File to Edit" prompt ->can setfile => :>can cancel
EditFile:Alt+E

;
;   End of Buffer
;
endfile:Ctrl+Pgdn

;
;   End of Window
;
end_of_window:=meta down
end_of_window:Ctrl+End

;
;   Execute Command.  In the PWB, you can enter any series of functions or
;   macros, including string literals "in quotes".
;
execute_macro:=arg "Command to Execute" prompt ->can execute => :>can cancel
execute_macro:F10

;
;   Exit
;
exit:Alt+X

;
;   Go to Line
;
GoTo:=arg "Line to Go To" prompt ->can mark => :>can cancel
GoTo:alt+g

;
;   Go to routine.
;
routines:=arg "Please load the Browser" message
routines:Ctrl+G

;
;   Incremental Search
;
i_search:=NotBrief

;
;   Insert Mode Toggle.  Toggle between Insert and Overstrike modes and issue
;   a message telling the user what has been done.
;
enterinsmode:yes
insert_mode:=Insertmode +>showins arg "Overstrike Mode" message =>  \
                       :>showins arg "Insert Mode" message
insert_mode:Alt+I

;
;   Left Side of Window
;
left_side:=meta left
left_side:Shift+Home

;
;   Line to Bottom of Window
;
l2b:=meta begline arg setwindow mpage plines meta down
l2b:Ctrl+B

;
;   Line to Top of Window
;
l2t:=meta begline arg setwindow
l2t:Ctrl+T

;
;   Load Macro File
;
; NotBrief:F9

;
;   Lower Case Block
;
tolower:= arg "Please load the txtfmt extension" message

;
;   Mark.  Known in the PWB as selecting text.	In the PWB, selection is
;   done in one of three modes: stream, box and line, which correspond
;   to normal and column/line selection in Brief.  To select lines,
;   start marking in column mode, but move straight down. To change
;   between modes in the PWB, a toggle function <selmode> is provided.
;
; Arg:Alt+A			   ; PWB selection (default assignment)

SelMode:Ctrl+B			   ; PWB mode toggle
ToStream:=:>top SelMode ->top	   ; Change to stream mode
ToBox:=ToStream SelMode 	   ; Change to box mode
ToLine:=ToBox SelMode		   ; Change to line mode

mark2:=ToBox Arg
mark2:Alt+C
mark2:Alt+L

mark1:=ToStream Arg
mark1:Alt+M

;
;   Next Buffer
;
setfile:Alt+N

;
;   Next Character
;
next_char:= arg arg "[~ ]" psearch

;
;   Next Error
;
NextMsg:Ctrl+N

;
;   Open New Line
;
open_line:=down linsert meta begline
open_line:Ctrl+Enter

;
;   Paste From Scrap
;
paste:ins

;
;   Pause Recording Toggle
;
NotBrief:Shift+F7

;
;   Pause On Error
;
pause_on_error:=NotBrief

;
;   PlayBack
;
recordvalue:=arg "No recording has been made" message
recordvalue:F8

;
;   Pop-up Errors.  In the PWB, this switches you to the compile file.	You
;   can go to any message with Alt+A Alt+A NextMsg.
;
next_error1:=arg "<compile>" setfile
next_error1:Ctrl+P

;
;   Previous Buffer.  There are no "next" and "previous" buffers in the PWB,
;   so this is the same as "Next Buffer".
;
setfile:Alt+-

;
;   Previous Character
;
prev_char:= arg arg "[~ ]" msearch

;
;   Print Block
;
print:Alt+P

;
;   Quote
;
quote:Alt+Q

;
;   Read File into Buffer
;
read_file:=arg arg "Name of File Read" prompt ->can paste => :>can cancel

;
;   Reformat Paragraph
;
reform:= arg "Please load the txtfmt extension" message

;
;   Regular Expression Toggle.	In the PWB, regular expression recognition
;   is controlled by modifying the search and search/replace functions
;   (Arg Arg forces regular expression search).
;
toggle_re:=togRE arg "togRE:=" srchname assign
toggle_re:Ctrl+F6
togRE:=REon

REoff:=arg "psrch:=arg \"String to Search for\" prompt ->can psearch => :>can cancel" assign  \
        arg "msrch:=arg \"String to Search for\" prompt ->can msearch => :>can cancel" assign  \
        arg "qrepl:=qreplace" assign  \
        arg "srchname:=\"REon\"" assign  \
        arg "Disabled Regular Expressions" message
REon:=arg "psrch:=arg arg \"String to Search for\" prompt ->can psearch => :>can cancel" assign  \
        arg "msrch:=arg arg \"String to Search for\" prompt ->can msearch => :>can cancel" assign  \
        arg "qrepl:=arg arg qreplace" assign  \
        arg "srchname:=\"REoff\"" assign  \
        arg "Enabled Regular Expressions" message

;
;   Remember.  Use Arg Arg Record to append to existing macro.
;
record:F7

;
;   Repeat
;
repeat:Ctrl+R

;
;   Right Side of Window
;
right_side:=meta right
right_side:Shift+End

;
;   Scroll Buffer Down in Window
;
mlines:Ctrl+D

;
;   Scroll Buffer Up in Window
;
plines:Ctrl+U

;
;   Search Again
;
search_again:=psearch
search_again:Shift+F5

;
;   Search Backward
;
search_back:=msrch arg "search_again:=msearch" assign
search_back:Alt+F5

;
;   Search Forward
;
search_fwd:=psrch arg "search_again:=psearch" assign
search_fwd:F5
search_fwd:Alt+S

;
;   Suspend Editor
;
shell:Alt+Z

;
;   Tab.  Please read the documentation for a full description of tabs.
;
graphic:tab
realtabs:yes
entab:0
tabstops:8

;
;   Tab Stops
;
tabs:= arg "Please load the txtfmt extension" message

;
;   Top of Buffer
;
begfile:Ctrl+PgUp

;
;   Top of Window
;
top_of_window:=meta up
top_of_window:Ctrl+Home

;
;   Translate Again
;
translate_again:=qrepl
translate_again:Shift+F6

;
;   Translate Backward
;
translate_back:=arg "You can only translate forwards" message
translate_back:Alt+F6

;
;   Translate Forward
;
translate:=qrepl
translate:F6
translate:Alt+T

;
;   Undo
;
undo:Alt+U
undo:num*

;
;   Use Tab Characters
;
use_tab_char:=arg "entab:1" assign

;
;   Window Border Toggle.  In the PWB, this cycles through the five
;   possible border states.
;
winstyle:Alt+F1

;
;
;   Write
;
write_it:=arg arg setfile
write_it:Alt+W

;
; BRIEF is a trademark of UnderWare, INC.


[pwb-pwbhelp brief-pwbhelp b-pwbhelp]

;
;   Help.  Attach context-sensitive help to Alt+H.
;
_pwbhelp_context:Alt+H


[pwb-pwbrowse brief-pwbrowse b-pwbrowse]

;
;  Browser.
;

routines:= pwbrowse1stdef

[pwb-txtfmt brief-txtfmt b-txtfmt]

center:= CenterLine
tolower:= lcase
reform:= justify
tabs:= ptab

;   Sample TOOLS.INI file for:
;
;   Microsoft Programmer's WorkBench Version 2.00
;   Copyright (c), 1989-1992  Microsoft Corp.
;
;----------------------------------------------------------------------
;   To use the macros or settings in this file, copy or merge this file
;   with your TOOLS.INI file.
;
;   Once in TOOLS.INI, the macros and editor settings in this file can
;   be defined by initializing the appropriate tagged section. A tagged
;   section for PWB begins with a tag, which has the form:
;
;       [PWB-name]
;
;   Where <name> is the name of the tagged section.
;
;   To initialize a named section of TOOLS.INI, execute Arg <name>
;   Initialize, as follows:
;
;   1.  Execute the Arg function (press ALT+A).
;   2.  Type the name of the tagged section.
;   3.  Execute the Initialize function (press SHIFT+F8).
;
;   If you want certain settings to be your default settings, copy the
;   contents of that section to the main PWB section.

;----------------------------------------------------------------------
;   Contents
;
;   Tag                 Description
;   --------------      -----------------------------------------------
;   [pwb pwb-main]      Main PWB section
;   [pwb-4.0]           Settings for MS-DOS 4.0 and 4.1
;   [pwb-5.0]           Settings for MS-DOS 5.0
;   [pwb-..]            Default file-extension settings
;   [pwb-.bak]          Settings for .BAK files
;   [pwb-utility]       Miscellaneous utility macros
;   [pwb-emulations]    Selected editor emulations
;   [pwb-visible]       Settings for visisble whitespace characters
;   [pwb-invisible]     Settings for invisisble whitespace characters
;   [pwb-wptab]         Settings for word-processor-like tab handling
;   [pwb-notab]         Settings for no tab characters
;   [pwb-CTPL]          C templates
;   [pwb-ckeys]         Key assignments for C templates
;   [pwb-samples]       Sample macros from Help
;   [pwb-tutor]         Sample macros from the PWB tutorial
;   [pwb-abbr]          Abbreviation facility

;----------------------------------------------------------------------
;   Note  - Some macros in this file assume certain conditions.
;
;   All macros in this file that use regular expressions assume that the
;   Unixre switch is set to yes, the default value for Unixre.
;
;   Many macros assume that the current selection mode is stream or box
;   mode. These macros may not work correctly in line selection mode.

;----------------------------------------------------------------------
[pwb pwb-main]
;   Main section of TOOLS.INI
;
;   Only this section, operating-system-specific, and file extension
;   sections are initialized at startup. For more information on these
;   sections, see the PWB Help under TOOLS.INI.

;   Autostart is executed automatically at startup.
Autostart :=

;----------------------------------------------------------------------
;   Sample operating system tagged sections

[pwb-4.0]
;   Settings when running on MS-DOS version 4.0 or 4.1

[pwb-5.0]
;   Settings when running on MS-DOS version 5.0

;----------------------------------------------------------------------
;   Sample file extension tagged sections

[pwb-..]
;   Default settings for any file extension that is not otherwise
;   defined.

color:text 17

[pwb-.asm]
;	Change tab settings for .ASM files

tabstops      :8
filetab       :8

[pwb-.bak]
;   It's easy to open a .BAK file by mistake, so this section defines
;   the text color to something noticeable.

color:text 4e

;----------------------------------------------------------------------
[pwb-utility]
;   Utility macros

;   Window and file management

;   Close all files in the active window except the current file.
;   When multiple files have been opened in a single window, this
;   macro removes the extra files.
AllBut1File  := cancel :>s setfile -> closefile < =>s

;   Close all windows except for the active window.
AllBut1Window:= cancel :>s openfile -> meta window < =>s

;   Minimize all windows.
MinimizeAll := cancel arg minimize

;   Restore all windows.
RestoreAll  := cancel arg minimize :>s selwindow minimize ->s  \
               selwindow minimize

;   Change directory to directory of current file.
;   Requires an editable file.
ccd  := linsert curfile arg curfilenam msearch arg meta ldelete  \
        begline arg right right setfile begline arg setfile undo

;   Change directory to directory of current file.
;   Requires an editable file.
;   This version is slower, but does not change the current search
;   pattern.
ccd2 := linsert curfile savecur curfilenam curfileext restcur  \
        :>s delete cdelete left right +>s  \
        begline arg right right setfile begline arg setfile undo


;   Synchronized error traversal: Build Results, source, and Help.
;
;   Traverses messages in the build results, showing the message, the
;   location of the message in the source file, and help for the message
;   in arranged windows.
;
;psync  - Synchronize to next message
;msync  - Synchronize to previous message
;setsync- Synchronize to message at the cursor in Build Results.

syncmsg := nextmsg -> pwbhelperr openfile arg arrangewindow

psync   := cancel syncmsg
msync   := cancel arg "-1" syncmsg
setsync := cancel arg "<COMPILE>" pwbwindow arg arg syncmsg

psync   :Alt+Down
msync   :Alt+Up
setsync :Alt+Goto

;----------------------------------------------------------------------
[pwb-emulations]
;   These macros approximate selected behaviors of other editors.

;   Successively go to beginning of line, top left window corner,
;   beginning of file.
BRIEFHome := begline +> home +> begfile

;   Successively go to end of line, end of last line in the window,
;   end of file.
BRIEFEnd  := endline +> meta down endline +> endfile

;   Emulate an emacs-style character delete. When at the end of a line,
;   delete the line break. Otherwise delete the character at the cursor.
;   Note that this macro includes the line break when deleting the last
;   character on a line.

EmacsDel  := delete "-" left right ->eol emacscdel => :>eol left  \
             arg meta sdelete

;----------------------------------------------------------------------
[pwb-visible]
;   Settings to make tabs, trailing spaces, and trailing lines visible.

tabdisp       :250
traildisp     :177
traillinesdisp:7

;----------------------------------------------------------------------
[pwb-invisible]
;   Settings to make tabs, trailing spaces, and trailing lines invisible.

tabdisp       :32
traildisp     :32
traillinesdisp:32

;----------------------------------------------------------------------
[pwb-wptab]
;   Word-processor-like settings.
;   Because tab characters and trailing spaces are allowed, the visible
;   whitespace settings above are recommended.

;   You can change tabstops and filetab to your preference, but should
;   have the same value for proper emulation.
tabstops  :8
filetab   :8

realtabs  :yes
tabalign  :yes
entab     :0
trailspace:yes

;   Insert a tab character in insert mode.
;   Move the cursor right one tab stop in overtype mode.
tabio := insertmode +>over insertmode "\t" =>  \
      :>over insertmode tab
tabio : Tab

;   Move right one tab stop in both insert mode and overtype mode.
;   To insert a tab in all modes, use Quote TAB (CTRL+P, TAB)
tab   :ctrl+tab

;----------------------------------------------------------------------
[pwb-notab]
;   Settings so that no new tab characters are added to the file.
;

Filetab :8          ;Tabs expand to 8 spaces
Realtabs:no         ;Do not preserve tabs
Entab   :0          ;Translate whitespace to spaces

;   Note that tab characters on unmodified lines are preserved.
;
;   To strip all tabs from the file, execute the TouchAll macro with
;   these settings. To also strip trailing spaces, uncomment the next
;   line.
;trailspace:no

;  TouchAll - Modify all nonblank lines
TouchAll:= savecur  \
           begfile arg arg replace "^." newline "\\0" newline restcur
TouchAll:Alt+D      ;Press Alt+D to touch all nonempty lines in the file

;----------------------------------------------------------------------
[pwb-CTPL]
;   C template macro set for Microsoft Programmer's WorkBench
;   Copyright (c), 1989-1992  Microsoft Corp.
;
;   CTPL is a useful example of an extended system of macros to
;   customize the PWB. You can change this set to implement your own C
;   programming style.
;
;   To install CTPL, add this section to your TOOLS.INI. When you want
;   to activate the macros, type:
;
;       Arg "ctpl" Initialize
;
;   Or define the following macro in the main section of TOOLS.INI:
;
;       CTPL:=arg "Ctpl" initialize
;       CTPL:Alt+F10
;
;   and press ALT+F10 to initialize the C templates.
;
;   Most templates are activated by typing a C keyword and executing the
;   DoTpl macro (Alt+T). Templates usually insert some text, then select
;   an active area--a "tag".
;
;   To fill out a tag, type the replacement text.
;
;   To skip the tag, execute Cancel (Press ESC).
;
;   To move back and forth among tags use the Mrec (ALT+PGUP) and Prec
;   (ALT+PGDN) macros.
;
;   Since tags are C comments, you can compile code with incompletely
;   filled-in templates.
;
;   For templates that do not have a keyword--a function or prototype,
;   for example--CTPL defines a key assignment. This command structure
;   minimizes the number of key bindings necessary to support the CTPL
;   macro set.
;
;   For example, the switch template uses the macro AddCase (ALT+F9) to
;   insert a case just before the default case provided by the switch
;   template.
;
;   HINT: Sometimes you don't want the semicolon that CTPL often places
;   after a tag. In these situations press RIGHT to extend the selection
;   to include the semicolon as well as the tag, and it is replaced by
;   what you type.
;
;   NOTE: CTPL macros assume that the current selection mode is box or
;   stream mode. If this becomes troublesome for you, use the mode-safe
;   versions of the SelTag and DoTpl macros. The CTPL macros also work
;   correctly in stream-selection mode. If you prefer stream selection,
;   change the mode-safe versions to use the _pwbstreammode macro.
;
;   NOTE: Because PWB rereads a file-extension tagged section each time
;   you move to the file, It is not recommend to rename the CTPL section
;   as [pwb-.C]. This works, but slows down switching to .C files.


;   Select word
selword    :=pword ->eof mword arg meta pword =>  \
           :>eof mword pword arg meta pword

;-- The core macro for CTPL
;   select the current word and execute it
DoTpl      :=selword execute

;   selection-mode safe DoTpl
;DoTpl     :=_pwbboxmode selword execute

;-- simple 'pairs'
parens     :="()" left
subscript  :="[]" left
angles     :="<>" left
quotes     :="\"\"" left

;-- messages
notag      :=arg "No more tags" message
nobrace    :=arg "Missing right brace" message
nodefault  :=arg "No \"default:\" found" message

;-- tag & utilities
tag        :="/*%*/"
stmt       :="/*%*/;"

seltag     :=arg right right right right right
;   selection-mode safe seltag
;seltag    :=_pwbboxmode arg right right right right right

;   Tag movement - Move to and select the position to be filled in.
;mrec      - Move to and select previous tag
;prec      - Move to and select next tag
mrec       :=cancel left  arg tag msearch ->f seltag => :>f notag
prec       :=cancel right arg tag psearch ->f seltag => :>f notag

;-- Utilities -- redefine to change indentation styles
;test      - condition in parentheses
;plist     - parameter list
;testbreak - type of break (if any) after a test
test       :="( " tag " )"
plist      :="( " tag " )"
testbreak  :=addline

;-- utilities for adding components of C constructs
;
;addline  - Add a line, with same indentation as this line
;addstmt  - Add a statement after this line
;addstmti - Add an indented statement after this line
;block    - Add a statement block after this line
;
addline  :=cancel begline down linsert
addstmt  :=addline tag mrec
addstmti :=addline tab tag mrec
block    :="{" addline "}" begline linsert tab tag down endline

;-- function, prototype and utilities
;
;func    - Parameter list and body
;proto   - Semicolon-terminated parameter list
;main    - Alias of func
;additem - Add item to the current parameter list or 'for' control
;
func     :=endline savecur plist addline block restcur prec
proto    :=endline plist ";" mrec
main     :=func
additem  :=cancel left arg arg "[;:)}]" psearch ->   \
           arg arg "[^ \t]" msearch right ", " tag right mrec

;printf, fprintf, sprintf  - Handy templates
;
printf   :=proto quotes tag "\\n"  mrec
fprintf  :=proto "std" tag ", " quotes tag "\\n" begline prec
sprintf  :=proto tag ", " tag ", " tag mrec mrec quotes tag  \
           endline mrec mrec

;-- conditional constructs
;
;if      - Add a condition and statement block
;else    - You usually use addelse, but this is still useful
;addelse - Add an else clause to the current if statement
;addelif - Add an else-if clause to the current if statement
;while   - While loop
;for     - For loop template. Use additem for comma-op items
;do      - Do  loop template
;queryop - "() ? : " template for the ternary operator
;
if      :=endline savecur  test testbreak block  restcur prec
else    :=testbreak block  mrec
addelse :=cancel arg "}" psearch ->f testbreak "else" else => :>f nobrace
addelif :=cancel arg "}" psearch ->f testbreak "else if" if => :>f nobrace
while   :=if
for     :=if stmt " " stmt " " tag  begline prec
do      :=testbreak block " while" test endline ";" mrec
queryop :=savecur test " ? " tag " : " tag restcur prec

_asm    :=testbreak block mrec

;-- declarations
;
enum    :=endline " " tag " { " tag " } " stmt begline prec
typedef :=endline " " tag " " stmt begline prec
struct  :=endline savecur " " tag testbreak block " " stmt restcur prec
class   :=struct

;-- switch statement and components
;   Use add-case to build the cases of the switch.
;   Use addbreak to terminate a statement section.
;
;case     - Colon-terminated placeholder
;addbreak - Insert a break statement after the current statement
;addcase  - Insert case just before the next or default case
;switch   - Condition, block, and default case.
;swiback  - By default case labels appear at the same indentation level
;           as the opening 'case' For indented case labels, define it
;           as 'swiback:='
swiback :=backtab
case    :=endline " " tag ":" mrec
addbreak:=addstmt "break;"  begline
addcase :=cancel arg arg "\\{default:\\!case\\}" psearch ->f   \
          linsert "case" case => :>f nodefault
switch  :=endline test testbreak block mrec right meta delete swiback   \
          "default:" addstmti "break" mrec

;-- preprocessor utilities
;inc     - #include <x>
;def     - #define x x
;pragma  - #pragma x( x )
inc   :=begline "#" endline "lude <>"  left
def   :=begline "#" endline "ine " tag " " tag  begline prec
pragma:=begline "#" endline " " tag plist begline prec

;   The OpenInclude macro opens an include file named in the next
;   #include directive. The macro demonstrates a technique using the
;   Lasttext function to pick up text from the file and modify it
;   without modifying the file or the clipboard.
OpenInclude :=  \
    up meta begline arg arg "^[ \t]*#[ \t]*include" psearch ->  \
    arg arg "[<>\"]" psearch -> right savecur psearch ->        \
    selcur lasttext begline "$INCLUDE:" openfile <n +>          \
    lastselect openfile <

;   Key Assignments
mrec      :Alt+PgUp
prec      :Alt+PgDn
addcase   :Alt+F9
addbreak  :Alt+F10
addelse   :Shift+Ctrl+E
addelif   :Shift+Ctrl+I
additem   :Alt+,
queryop   :Alt+/
parens    :Ctrl+0
subscript :Alt+]
quotes    :alt+'
angles    :Alt+>
addstmt   :Ctrl+;
addstmti  :Shift+Ctrl+:
proto     :Shift+Ctrl+P
func      :Shift+Ctrl+F
dotpl     :Alt+T

;-------------------
[pwb-ckeys]
;   Initialize this section if you've switched to another type of file
;   and need to recover your CTPL keys.
mrec :=cancel left  arg tag msearch ->f seltag => :>f notag
prec :=cancel right arg tag psearch ->f seltag => :>f notag
mrec        :Alt+PgUp
prec        :Alt+PgDn
addcase     :Alt+F9
addbreak    :Alt+F10
addelse     :Shift+Ctrl+E
addelif     :Shift+Ctrl+I
additem     :Alt+,
queryop     :Alt+/
parens      :Ctrl+0
subscript   :Alt+]
quotes      :alt+'
angles      :Alt+>
addstmt     :Ctrl+;
addstmti    :Shift+Ctrl+:
proto       :Shift+Ctrl+P
func        :Shift+Ctrl+F
dotpl       :Alt+T

;----------------------------------------------------------------------
[pwb-samples]
;   This section contains example macros from help.
;

;   Run the program for current PWB project
Run  :=arg "run" compile

;   Debug the program for current PWB project
Debug:=arg "debug" compile


;   Insert spaces to next tab stop.
InsertTab := arg tab sinsert

;   Indent a paragraph to the next tab stop:
para_indent:=_pwbboxmode meta mpara down begline arg   \
             meta ppara up begline tab insert

;    Move the cursor to column one, then toggle between column one and
;    the first nonblank character on the line.
ToggleBegline := left ->x meta :>x begline

;   Put parts of current filename on the clipboard.
Path2clip     := Arg Curfile Copy
Name2clip     := Arg Curfilenam Copy
Filename2clip := Arg Curfilenam Curfileext Copy

;-------------------
;   Macro utilities
;   Macro writing and debugging tools, plus convenient shorthands

;   Set True return value. Side effect: cancels active arguments
True := cancel

;   Set False return value. Side effect: turns off Meta
False := meta +>off meta :>off meta

;   The following macros test common conditions.
;
;   At beginning of line?
bol? := savecur begline +>no True => :>no restcur False

;   Any text at cursor?
text? := right +>yes left False => :>yes left True

;   Is the current line an empty line?
empty? := meta begline endline ->yes False => :>yes True


;   Display the current macro return value on the status bar, then
;   reset return value. Use this macro when debugging loops and
;   conditional flow control.
? := +>t arg "FALSE" message => :>t arg "TRUE" message

;   Refresh - force a full screen redraw
! := meta message


;   These two utilities make readable find/replace macros. For example,
;   use the phrase:
;       replace "<junk text>" with nothing
;   to delete <junk text> from the file.
With    := newline
Nothing := " " cdelete newline


;   Position the window so that the next tagged section of TOOLS.INI
;   starts at the top of the window.
FindTag:=arg arg "^\\[[^\\]]+\\]" psearch ->none  \
         arg setwindow => :>none arg "no tag" message

;   Adjust each line continuation (backslash at the end of a line) so
;   that it appears in column 73.
SlashJust:=savecur begfile arg arg replace    \
           "^\\(.*[^ ]\\)  +\\\\$" newline    \
           "\\(-70,1)  \\\\" newline restcur


;   Prompt for help topic to look up.
QueryHelp := arg "Get Help On:" prompt ->no pwbhelp =>  \
          :>no arg "Query Cancelled" message

;-------------------
;   Iterations on the file.
;   All... - Macros that iterate over the file, one line at a time.
;   Act    - Define as the action to be performed on each line.
Act :=

;   Perform Act on all lines of the file, starting from the end.
AllBackward := endfile :>s act up +>s

;   Perform Act on all lines from start, including a page of blank lines
;   at the end of the file.
AllForward  := begfile :>s act down +>s

;   Perform Act on all lines from start, testing for end-of-file at each
;   step. Solves 'extra lines' problem of AllForward at the cost of
;   speed.
AllForward2 := begfile savecur :>s restcur act   \
               down savecur begline endfile +>s

;-------------------
;   Perform Act at each occurrence of a regular expression in the file.
Act :=

;   Regular expression to match (example is for blank line)
RE   := "^$"

;   Perform Act at each occurrence of RE.
For1 := begfile :>s arg arg RE psearch -> act =>s

;   Like For1, but iterates much faster with the restriction that Act
;   cannot perform a search.
For2 := begfile arg arg RE :>s psearch -> act =>s

;-------------------
;GetMac - Load a separate file of macros or assignments.
;
;Usage: Arg 'file' getMac where <file> is the base name of
;       a file in the INIT directory
;
GetMac := cancel lasttext begline "$INIT:" endline ".MAC"  \
          setfile <n +>Ok lasttext begline               \
          "Can't find \"" endline "\"" message =>          \
       :>Ok begfile arg endfile assign ->  arg refresh

;----------------------------------------------------------------------
[pwb-tutor]
;   PWB Tutorial macro examples
CloseWindows := :>Loop Openfile -> Meta Window Window =>Loop
CloseWindows : SHIFT+CTRL+W

LineComment := "//  "
RevHead     := "** Revision History **"
RevComment  :=  \
  Arg Arg "Start" Mark                 \
  Begfile Arg RevHead Psearch +>Found  \
  Linsert LineComment RevHead          \
:>Found  \
  Down Linsert Begline LineComment Curdate " ("    \
  Arg "Initials" Prompt ->Quit Paste Endline ") "  \
  Arg "Comment"  Prompt ->Quit Paste =>End         \
:>Quit Meta Ldelete  \
:>End Arg "Start" Mark
RevComment:CTRL+H


;----------------------------------------------------------------------
[pwb-abbr]
;   Abbreviations - Define and expand abbreviations.

;  Select the current word
SelWord:= pword ->eof mword arg meta pword =>  \
                :>eof mword pword arg meta pword

;  Delete the current word and execute it
Expand := selword lasttext cancel lastselect meta sdelete lasttext execute
Expand :Alt+T

;  Simple text expansion
prog   := "program"
ex     := "example"

;  Expand 'cmd' once to get 'command', Expand twice to get 'command line'
cmd    := "command"
command:= "command line"

;   Expand to the contents of the file HEADER.TPL in the INIT
;   directory--a good technique for large boilerplate text.
Header := arg arg "$INIT:header.TPL" paste


[end]